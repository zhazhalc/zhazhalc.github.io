<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构学习--链表</title>
    <link href="/2023/01/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/01/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>头节点：第一个有效节点</li><li>尾节点：最后一个有效节点</li><li>头结点：第一个有效节点之前的那个节点；头结点并不存放有效数据；加头节点的目的主要是为了方便对链表的操作。</li><li>头指针：指向头结点的指针变量</li><li>尾指针：指向尾节点的指针变量  <h4 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h4></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode记录</title>
    <link href="/2023/01/01/LeetCode%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/01/01/LeetCode%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h4 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">twoSum</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *ret=(<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;numsSize;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]+nums[j]==target)</span><br><span class="line">            &#123;</span><br><span class="line">                ret[<span class="number">0</span>]=i;</span><br><span class="line">                ret[<span class="number">1</span>]=j;</span><br><span class="line">                *returnSize=<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *returnSize=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较简单，主要是要记得带上returnSize.<br>461.汉明距离</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">hammingDistance</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a=x^y,ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(a)</span><br><span class="line">    &#123;</span><br><span class="line">        ret+=a&amp;<span class="number">1</span>;</span><br><span class="line">        a&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要是复习简单的位运算相关知�?  </p><h4 id="20-有效的括�"><a href="#20-有效的括�" class="headerlink" title="20.有效的括�?"></a>20.有效的括�?</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="title function_">BoolRight</span><span class="params">(<span class="type">char</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="string">&#x27;)&#x27;</span>)   <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="string">&#x27;]&#x27;</span>)   <span class="keyword">return</span> <span class="string">&#x27;[&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="string">&#x27;&#125;&#x27;</span>)   <span class="keyword">return</span> <span class="string">&#x27;&#123;&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isValid</span><span class="params">(<span class="type">char</span> * s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">int</span> top=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> skp[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> ch=BoolRight(s[i]);</span><br><span class="line">        <span class="keyword">if</span>(ch)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(top==<span class="number">0</span>||skp[top<span class="number">-1</span>]!=ch)    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            top--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>    skp[top++]=s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> top==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察了一下发现Ture的都是对称的，但是不知道怎么判断，看题解，wa 是栈诶，后进先出，遇到右边的就检验他前一个的�?  </p><h4 id="70-爬楼�"><a href="#70-爬楼�" class="headerlink" title="70.爬楼�?"></a>70.爬楼�?</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a=b;</span><br><span class="line">        b=c;</span><br><span class="line">        c=a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>斐波拉契数列  </p><h4 id="9-回文�"><a href="#9-回文�" class="headerlink" title="9.回文�?"></a>9.回文�?</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)   </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">int</span> num=x,cur=<span class="number">0</span>;<span class="comment">//用int会溢�?</span></span><br><span class="line">    <span class="keyword">while</span>(num&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=cur*<span class="number">10</span>+num%<span class="number">10</span>;</span><br><span class="line">        num/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    while(x&gt;cur)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        cur=cur*10+x%10;</span></span><br><span class="line"><span class="comment">        x/=10;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return x==cur||cur==x/10;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> x==cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13-罗马数字转整�"><a href="#13-罗马数字转整�" class="headerlink" title="13.罗马数字转整�?"></a>13.罗马数字转整�?</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">romanToInt</span><span class="params">(<span class="type">char</span> * s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> SymbolValues[<span class="number">26</span>];</span><br><span class="line">    SymbolValues[<span class="string">&#x27;I&#x27;</span>-<span class="string">&#x27;A&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">    SymbolValues[<span class="string">&#x27;V&#x27;</span>-<span class="string">&#x27;A&#x27;</span>]=<span class="number">5</span>;</span><br><span class="line">    SymbolValues[<span class="string">&#x27;X&#x27;</span>-<span class="string">&#x27;A&#x27;</span>]=<span class="number">10</span>;</span><br><span class="line">    SymbolValues[<span class="string">&#x27;L&#x27;</span>-<span class="string">&#x27;A&#x27;</span>]=<span class="number">50</span>;</span><br><span class="line">    SymbolValues[<span class="string">&#x27;C&#x27;</span>-<span class="string">&#x27;A&#x27;</span>]=<span class="number">100</span>;</span><br><span class="line">    SymbolValues[<span class="string">&#x27;D&#x27;</span>-<span class="string">&#x27;A&#x27;</span>]=<span class="number">500</span>;</span><br><span class="line">    SymbolValues[<span class="string">&#x27;M&#x27;</span>-<span class="string">&#x27;A&#x27;</span>]=<span class="number">1000</span>;</span><br><span class="line">    <span class="type">int</span> n=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> value=SymbolValues[s[i]-<span class="string">&#x27;A&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(i&lt;n<span class="number">-1</span>&amp;&amp;value&lt;SymbolValues[s[i+<span class="number">1</span>]-<span class="string">&#x27;A&#x27;</span>])</span><br><span class="line">            ans-=value;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans+=value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14-最长公共前缀"><a href="#14-最长公共前缀" class="headerlink" title="14.最长公共前缀"></a>14.最长公共前缀</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">longestCommonPrefix</span><span class="params">(<span class="type">char</span> ** strs, <span class="type">int</span> strsSize)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(strsSize==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="built_in">strlen</span>(strs[<span class="number">0</span>]);j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;strsSize;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(strs[<span class="number">0</span>][j]!=strs[k][j])</span><br><span class="line">            &#123;</span><br><span class="line">                strs[<span class="number">0</span>][j]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于字符串数组的处理，学到了�?  </p><h4 id="26-删除有序数组中的重复�"><a href="#26-删除有序数组中的重复�" class="headerlink" title="26.删除有序数组中的重复�?"></a>26.删除有序数组中的重复�?</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span>&#123;</span><br><span class="line">   <span class="type">int</span> fast=<span class="number">1</span>,slow=<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">while</span>(fast&lt;numsSize)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span>(nums[fast]!=nums[fast<span class="number">-1</span>])</span><br><span class="line">       &#123;</span><br><span class="line">           nums[slow]=nums[fast];</span><br><span class="line">           slow++;</span><br><span class="line">       &#125;</span><br><span class="line">       fast++;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双指针法�?<strong>有序</strong>，这个条件很关键  </p><h4 id="27-移除数据"><a href="#27-移除数据" class="headerlink" title="27.移除数据"></a>27.移除数据</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> val)</span>&#123;</span><br><span class="line">    <span class="type">int</span> fast=<span class="number">0</span>,slow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(fast&lt;numsSize)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[fast]!=val)</span><br><span class="line">        &#123;</span><br><span class="line">            nums[slow]=nums[fast];</span><br><span class="line">            slow++;</span><br><span class="line">        &#125;</span><br><span class="line">        fast++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和上面那个题一样，更简单一�? </p><h4 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35.搜索插入位置"></a>35.搜索插入位置</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span> *nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[numsSize - <span class="number">1</span>] &lt; target)</span><br><span class="line">        <span class="keyword">return</span> numsSize;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numsSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == target)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numsSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&gt;target)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开始给我想复杂了，，，  </p><h4 id="58-最后一个单词的长度"><a href="#58-最后一个单词的长度" class="headerlink" title="58.最后一个单词的长度"></a>58.最后一个单词的长度</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">lengthOfLastWord</span><span class="params">(<span class="type">char</span> * s)</span>&#123;</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">strlen</span>(s)<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> length=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(len==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(s[len]==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        len--;</span><br><span class="line">    <span class="keyword">while</span>(len&gt;=<span class="number">0</span>&amp;&amp;s[len]!=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        length++;</span><br><span class="line">        len--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="66-加一"><a href="#66-加一" class="headerlink" title="66.加一"></a>66.加一</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">plusOne</span><span class="params">(<span class="type">int</span>* digits, <span class="type">int</span> digitsSize, <span class="type">int</span>* returnSize)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=digitsSize<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        digits[i]=digits[i]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(digits[i]!=<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            *returnSize=digitsSize;</span><br><span class="line">            <span class="keyword">return</span> digits;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(digits[i]==<span class="number">10</span>)</span><br><span class="line">            digits[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>* ans=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*(digitsSize+<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>)*(digitsSize+<span class="number">1</span>));</span><br><span class="line">    ans[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    *returnSize=digitsSize+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/12/27/hello-world/"/>
    <url>/2022/12/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>尝试</title>
    <link href="/2022/12/27/TEST/"/>
    <url>/2022/12/27/TEST/</url>
    
    <content type="html"><![CDATA[<p>芜湖，开始写博客啦，主要是希望能监督自己去学习新东西，感觉写博客是很好的学习方式捏。<br>先记录下这次搭博客吧  </p><h5 id="还算顺利的搭博客初尝试"><a href="#还算顺利的搭博客初尝试" class="headerlink" title="还算顺利的搭博客初尝试"></a>还算顺利的搭博客初尝试</h5><p>选了比较主流的github+hexo，感觉选对教程很重要，花了大概一个小时去看各类教程，对流程和原理大概有一些认识了，就开始搭了，推荐这个<a href="https://oceanwang.top/personal-website-1/">教程</a> ,跟着走基本是没有问题的。<br>也遇到过几个error，但只要会用搜索引擎就可以解决，可惜这次没有记录下来，感觉都是小白（比如我）容易遇到的问题orz，下次一定！</p>]]></content>
    
    
    
    <tags>
      
      <tag>日常纪事</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言hb记录</title>
    <link href="/2022/12/26/C%E8%AF%AD%E8%A8%80hb%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/12/26/C%E8%AF%AD%E8%A8%80hb%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>感觉指针后面的东西还是没有学扎实，所以找了几个视频学习，这篇用来记录一下</p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p><strong>指针就是地址,地址就是指针</strong>，地址就是内存单元的编号，是从0开始的非负整数。指针变量是存放地址的变量，两者不同，但我们叙述的时候会把指针变量简称为指针<br>//偏个题，二进制的一位叫做1bit，字节（byte）英文字符通常是一个字节 1byte=8bit<br>基本知识</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test_1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>* p;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    p=&amp;i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#x\n&quot;</span>,p);</span><br><span class="line">    *p=<span class="number">5</span>;<span class="comment">/*当把i的地址赋给指针p时，*p所代表的就是i的值，就是说*p完全等同于i, p是i的地址，*是解引用p*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">    i=<span class="number">4</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#x\n&quot;</span>,p);<span class="comment">//p存放的是i的地址，所以改变i对p是没有丝毫影响的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test_2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>* q;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*q);<span class="comment">//emm为啥是4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>* p,<span class="type">int</span>* q)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    t=*p;</span><br><span class="line">    *p=*q;</span><br><span class="line">    *q=t;</span><br><span class="line">    <span class="comment">/*t=p;</span></span><br><span class="line"><span class="comment">    p=q;</span></span><br><span class="line"><span class="comment">    q=t;*/</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="comment">//虽然把a,b的地址传进去了，但是a,b的地址是不能改变的，所以没有用,我们需要的是改变a,b的内容</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test_1();</span><br><span class="line">    test_2();</span><br><span class="line">    <span class="type">int</span> a=<span class="number">3</span>,b=<span class="number">5</span>;</span><br><span class="line">    swap(&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d&quot;</span>,a,b);<span class="comment">//a=3,b=5,没有用</span></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h4><h5 id="指针和一维数组"><a href="#指针和一维数组" class="headerlink" title="指针和一维数组"></a>指针和一维数组</h5><p><strong>一维数组名</strong>是个指针常量，存放的是一维数组第一个元素的地址，一个指针变量，无论它指向的变量占几个字节，该指针变量本身只占四个字节<br>一个变量的地址使用该变量首字节的地址来表示</p><h5 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h5><p>传统数组：eg:int a[5];传统形式定义的数组，该数组的内存程序员无法手动释放，在一个函数运行期间，系统为该函数中数组所分配的空间会一直存在，直到该函数运行完毕时，数组的空间才会被系统释放。而且不能跨函数使用<br><strong>malloc()</strong> 函数：eg: int * p=(int * )malloc(sizeof(int)) </p><ul><li><code>malloc</code> 返回的是已分配空间的void指针，所以需要强制类型转换</li><li>接收的是要分配的字节数，返回的是开辟的内存第一个字节的首地址</li><li>p本身所占的内存是静态分配的，而p所指向的内存是动态分配的<h5 id="多级指针"><a href="#多级指针" class="headerlink" title="多级指针"></a>多级指针</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">f1</span><span class="params">(<span class="type">int</span>** q)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> i=<span class="number">5</span>;</span><br><span class="line">   <span class="comment">//*q=&amp;i;//这编译可以通过</span></span><br><span class="line">   **q=<span class="number">5</span>;<span class="comment">//这样就会出问题了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">f2</span><span class="params">(<span class="type">int</span>** q)</span></span><br><span class="line">&#123;</span><br><span class="line">    *q=(<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    **q=<span class="number">5</span>;<span class="comment">//这样没问题</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>* p;</span><br><span class="line">    <span class="comment">//f1(&amp;p);</span></span><br><span class="line">    f2(&amp;p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);</span><br><span class="line">    <span class="comment">/*虽然结果是5，但是逻辑上是有问题的，他用了f()函数的i</span></span><br><span class="line"><span class="comment">    用了f()函数的内存，而i的内存应该在f()结束后就被释放的，造成了内存的越界，不安全?*/</span></span><br><span class="line">    <span class="comment">//free(p);</span></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="静态内存分配和动态内存分配"><a href="#静态内存分配和动态内存分配" class="headerlink" title="静态内存分配和动态内存分配"></a>静态内存分配和动态内存分配</h5><p>可<a href="https://yuhao0102.github.io/2021/04/21/%E9%9D%99%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/">参考</a></p><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>About -&gt;: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>;</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">str</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">ptr</span>=</span>&amp;str;</span><br><span class="line"><span class="comment">//则 ptr-&gt;age==(*ptr).age==str.age</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>（好像没怎么用过&amp;&amp;看过）限定范围（？托下巴思考  </p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>关于数组  </p><ul><li>优点：存取速度快</li><li>缺点：需要一个连续的很大的内存空间；插入和删除的效率低  </li></ul><p>感觉可以直接去看数据结构学链表了</p>]]></content>
    
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
