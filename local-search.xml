<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/20/%E5%8F%8C%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/03/20/%E5%8F%8C%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>感觉写过单链表后，双链表容易了一些，而且感觉双链表比单链表方便很多✌</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span>  </span><br>   <br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> DListNodeDataType;  <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DoubleListNode</span> &#123;</span>  <br>    DListNodeDataType data;  <span class="hljs-comment">// 用来存放结点的数据  </span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DoubleListNode</span>* <span class="hljs-title">next</span>;</span>  <span class="hljs-comment">// 指向后继节点的指针  </span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DoubleListNode</span>* <span class="hljs-title">prev</span>;</span>  <span class="hljs-comment">// 指向前驱节点的指针  </span><br>&#125; DLNode;  <span class="hljs-comment">// 重命名为DLNode  </span><br>   <br>DLNode* <span class="hljs-title function_">DLNodeInit</span><span class="hljs-params">()</span>;  <br>DLNode* <span class="hljs-title function_">CreateNewNode</span><span class="hljs-params">(DListNodeDataType x)</span>;  <br><span class="hljs-type">void</span> <span class="hljs-title function_">DLNodePrint</span><span class="hljs-params">(DLNode* pHead)</span>;  <br>DLNode* <span class="hljs-title function_">DLNodeFind</span><span class="hljs-params">(DLNode* pHead, DListNodeDataType x)</span>;  <br><span class="hljs-type">void</span> <span class="hljs-title function_">DLNodeInsert</span><span class="hljs-params">(DLNode* pos, DListNodeDataType x)</span>;  <br><span class="hljs-type">void</span> <span class="hljs-title function_">DLNodeDelete</span><span class="hljs-params">(DLNode* pos)</span>;  <br><span class="hljs-type">void</span> <span class="hljs-title function_">DLNodePushBack</span><span class="hljs-params">(DLNode* pHead, DListNodeDataType x)</span>;  <br><span class="hljs-type">void</span> <span class="hljs-title function_">DLNodePushFront</span><span class="hljs-params">(DLNode* pHead, DListNodeDataType x)</span>;  <br><span class="hljs-type">void</span> <span class="hljs-title function_">DLNodePopBack</span><span class="hljs-params">(DLNode* pHead)</span>;  <br><span class="hljs-type">void</span> <span class="hljs-title function_">DLNodePopFront</span><span class="hljs-params">(DLNode* pHead)</span>;  <br><span class="hljs-type">void</span> <span class="hljs-title function_">DLNodeDestroy</span><span class="hljs-params">(DLNode* pHead)</span>;  <br>  <br><span class="hljs-comment">//初始化链表，头节点  </span><br>DLNode* <span class="hljs-title function_">DLNodeInit</span><span class="hljs-params">()</span>  <br>&#123;  <br>    DLNode* phead = (DLNode* )<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(DLNode*));  <br>    phead-&gt;next = phead;  <br>    phead-&gt;prev = phead;    <span class="hljs-comment">//先全都指向自己  </span><br>    <span class="hljs-keyword">return</span> phead;  <br>&#125;  <br>  <br>DLNode* <span class="hljs-title function_">CreateNewNode</span><span class="hljs-params">(DListNodeDataType x)</span>  <br>&#123;  <br>    DLNode* new_node = (DLNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(DLNode));  <br>    <span class="hljs-keyword">if</span>(new_node == <span class="hljs-literal">NULL</span>) &#123;  <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloc failed\n&quot;</span>);  <br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);  <br>    &#125;  <br>    new_node-&gt;next = <span class="hljs-literal">NULL</span>;  <br>    new_node-&gt;prev = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">//先置空  </span><br>    <span class="hljs-keyword">return</span> new_node;  <br>&#125;  <br>  <br><span class="hljs-type">void</span> <span class="hljs-title function_">DLNodePrint</span><span class="hljs-params">(DLNode* pHead)</span>  <br>&#123;  <br>    assert(pHead);  <span class="hljs-comment">//防止空  </span><br>    DLNode* cur = pHead-&gt;next;  <br>    <span class="hljs-keyword">while</span> (cur-&gt;next != pHead) &#123;  <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d-&gt;&quot;</span>,cur-&gt;data);  <br>        cur = cur-&gt;next;  <br>    &#125;  <br>&#125;  <br><span class="hljs-comment">//查找  </span><br>DLNode* <span class="hljs-title function_">DLNodeFind</span><span class="hljs-params">(DLNode* pHead, DListNodeDataType x)</span>  <br>&#123;  <br>    assert(pHead);  <br>    DLNode* cur = pHead-&gt;next;  <br>    <span class="hljs-keyword">while</span> (cur-&gt;next != pHead) &#123;  <br>        <span class="hljs-keyword">if</span> (cur-&gt;data == x) &#123;  <br>            <span class="hljs-keyword">return</span> cur;  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            cur = cur-&gt;next;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;  <br>&#125;  <br>  <br><span class="hljs-comment">//特定位置前插  </span><br><span class="hljs-type">void</span> <span class="hljs-title function_">DLNodeInsert</span><span class="hljs-params">(DLNode* pos, DListNodeDataType x)</span>  <br>&#123;  <br>    assert(pos);  <br>    DLNode* new_node = CreateNewNode(x);  <br>    DLNode* posPrev = pos-&gt;prev;    <span class="hljs-comment">//保存前驱节点  </span><br>    posPrev-&gt;next = new_node;  <br>    new_node-&gt;prev = posPrev;  <br>    new_node-&gt;next = pos;  <br>    pos-&gt;prev = new_node;  <br>&#125;  <br>  <br><span class="hljs-comment">//删除  </span><br><span class="hljs-type">void</span> <span class="hljs-title function_">DLNodeDelete</span><span class="hljs-params">(DLNode* pos)</span>  <br>&#123;  <br>    assert(pos);  <br>    DLNode* posPrev = pos-&gt;prev;  <br>    DLNode* posNext = pos-&gt;next;  <br>    posPrev-&gt;next = posNext;  <br>    posNext-&gt;prev = posPrev;  <br>    <span class="hljs-built_in">free</span>(pos);  <br>    pos = <span class="hljs-literal">NULL</span>;     <br>&#125;  <br>  <br><span class="hljs-comment">/*尾插*/</span>  <br><span class="hljs-type">void</span> <span class="hljs-title function_">DLNodePushBack</span><span class="hljs-params">(DLNode* pHead, DListNodeDataType x)</span>  <br>&#123;  <br>    assert(pHead);  <br>    DLNodeInsert(pHead,x);      <span class="hljs-comment">//在phead前插不就是尾插吗![](file:///C:\Users\zhazhalc\AppData\Roaming\Tencent\QQTempSys\4[@A~Q$(R801ZJY$6X%(CE7.png)  </span><br>&#125;  <br>  <br><span class="hljs-comment">/*头插*/</span>  <br><span class="hljs-type">void</span> <span class="hljs-title function_">DLNodePushFront</span><span class="hljs-params">(DLNode* pHead, DListNodeDataType x)</span>  <br>&#123;  <br>    assert(pHead);  <br>    DLNodeInsert(pHead-&gt;next,x);  <br>&#125;  <br>  <br><span class="hljs-comment">/*尾删*/</span>  <br><span class="hljs-type">void</span> <span class="hljs-title function_">DLNodePopBack</span><span class="hljs-params">(DLNode* pHead)</span>  <br>&#123;  <br>    assert(pHead);  <br>    DLNodeDelete(pHead-&gt;prev);  <br>&#125;  <br>  <br><span class="hljs-comment">/*头删*/</span>  <br><span class="hljs-type">void</span> <span class="hljs-title function_">DLNodePopFront</span><span class="hljs-params">(DLNode* pHead)</span>  <br>&#123;  <br>    assert(pHead);  <br>    DLNodeDelete(pHead-&gt;next);  <br>&#125;  <br>  <br><span class="hljs-type">void</span> <span class="hljs-title function_">DLNodeDestroy</span><span class="hljs-params">(DLNode* pHead)</span>  <br>&#123;  <br>    assert(pHead);  <br>    DLNode* cur = pHead-&gt;next;  <br>    <span class="hljs-keyword">while</span>(cur != pHead) &#123;  <br>        DLNode* next = cur-&gt;next;  <br>        <span class="hljs-built_in">free</span>(cur);  <br>        cur = next;  <br>    &#125;  <br>    <span class="hljs-built_in">free</span>(pHead);  <br>    pHead = <span class="hljs-literal">NULL</span>;  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>单链表基本操作</title>
    <link href="/2023/03/11/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/03/11/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>一直对链表不太熟悉，感觉自己理解了，可是写代码的时候还是很艰难，于是这次完整的自己写了一遍基本操作，应该会好一些</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> SLNodeDataType;        <span class="hljs-comment">// SLNodeDataType == int</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SingleListNode</span> &#123;</span><br>    SLNodeDataType data;           <span class="hljs-comment">// 用来存放节点的数据 int data</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SingleListNode</span>* <span class="hljs-title">next</span>;</span>   <span class="hljs-comment">// 指向后继节点的指针</span><br>&#125; SLNode;             <br><br>SLNode* <span class="hljs-title function_">CreateNewNode</span><span class="hljs-params">(SLNodeDataType x)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SListPrint</span><span class="hljs-params">(SLNode* pHead)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SListPushBack</span><span class="hljs-params">(SLNode** ppHead, SLNodeDataType x)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SListPushFront</span><span class="hljs-params">(SLNode** ppHead, SLNodeDataType x)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SListPopBack</span><span class="hljs-params">(SLNode** ppHead)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SListPopFront</span><span class="hljs-params">(SLNode** ppHead)</span>;<br>SLNode* <span class="hljs-title function_">SListFind</span><span class="hljs-params">(SLNode* pHead, SLNodeDataType x)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SListInsert</span><span class="hljs-params">(SLNode** ppHead, SLNode* pos, SLNodeDataType x)</span>;<br><span class="hljs-comment">// void SListInsert(SLNode* pHead, int pos, SLNodeDataType x);</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SListEarse</span><span class="hljs-params">(SLNode** ppHead, SLNode* pos)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SListDestroy</span><span class="hljs-params">(SLNode** ppHead)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SListInsertAfter</span><span class="hljs-params">(SLNode* pos, SLNodeDataType x)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">SListEraseAfter</span> <span class="hljs-params">(SLNode* pos)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">SListPrint</span><span class="hljs-params">(SLNode* pHead)</span><br>&#123;<br>    SLNode* temp=pHead;<br>    <span class="hljs-keyword">while</span> (temp != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d-&gt;&quot;</span>, temp-&gt;data);<br>        temp = temp-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL\n&quot;</span>);<br>&#125;<br><br>SLNode* <span class="hljs-title function_">CreateNewNode</span><span class="hljs-params">(SLNodeDataType x)</span><br>&#123;<br>    SLNode* new_node = (SLNode* )<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(SLNode));<br>    <span class="hljs-keyword">if</span> (new_node == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Malloc falied!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    new_node-&gt;data = x;<br>    new_node-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> new_node;<br>&#125;<br><span class="hljs-comment">/*这里用 &quot;二级指针&quot; 接收，因为传入的就是一个结构体指针的地址（&amp;pList），</span><br><span class="hljs-comment">它本身就是一个指针了，所以这里我们就需要用指针的指针（即二级指针）来接收它。</span><br><span class="hljs-comment">因为形参是实参的一份临时拷贝。至于这里为什么传入 &amp;pList 呢？因为形参只是实参的一份临时拷贝，</span><br><span class="hljs-comment">为了能够改变外部，所以我们要采用址传递（即传入结构体指针 pList 的地址并用二级指针接收）。*/</span><br><span class="hljs-comment">//尾插</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SListPushBack</span><span class="hljs-params">(SLNode** ppHead, SLNodeDataType x)</span><br>&#123;<br>   SLNode* new_node = CreateNewNode(x);<span class="hljs-comment">//新节点</span><br>   <span class="hljs-keyword">if</span> (new_node == <span class="hljs-literal">NULL</span>) &#123;<br>        *ppHead = new_node;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>        SLNode* end = *ppHead;<br>        <span class="hljs-keyword">while</span>(end-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>            end = end-&gt;next;<br>        &#125;<br>        end-&gt;next = new_node;<br>   &#125;<br>&#125;<br><span class="hljs-comment">//头插</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SListPushFront</span><span class="hljs-params">(SLNode** ppHead, SLNodeDataType x)</span><br>&#123;<br>    SLNode* new_node = CreateNewNode(x);<br>    new_node-&gt;next = *ppHead;<br>    *ppHead = new_node;<span class="hljs-comment">//更新头节点</span><br>&#125;<br><span class="hljs-comment">//尾删</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SListPopBack</span><span class="hljs-params">(SLNode** ppHead)</span><br>&#123;<br>    <span class="hljs-comment">//断言，防止结点为空</span><br>    assert(*ppHead != <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-comment">//如果只有一个结点</span><br>    <span class="hljs-keyword">if</span> ((*ppHead)-&gt;next == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">free</span>(*ppHead);<br>        *ppHead = <span class="hljs-literal">NULL</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        SLNode* prev;<br>        SLNode* end= *ppHead;<br>        <span class="hljs-keyword">while</span> (end-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>            prev = end;<br>            end = end-&gt;next;<br>        &#125;<br>        <span class="hljs-built_in">free</span>(end);<br>        end = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-comment">/*因为 free 之后那块开辟的内存空间已经不在了，它的功能只是把开辟的空间回收掉，</span><br><span class="hljs-comment">        但是 p 仍然还指向那块内存空间的起始位置，这合理吗？这不合理。</span><br><span class="hljs-comment">        所以我们需要使用 p = NULL 把他置成空指针。*/</span><br>        prev-&gt;next = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//头删</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SListPopFront</span><span class="hljs-params">(SLNode** ppHead)</span><br>&#123;<br>    assert(*ppHead != <span class="hljs-literal">NULL</span>); <br>    SLNode* save_next = (*ppHead)-&gt;next;<br>    <span class="hljs-built_in">free</span>(*ppHead);<br>    *ppHead = save_next;<br>&#125;<br><br>SLNode* <span class="hljs-title function_">SListFind</span><span class="hljs-params">(SLNode* pHead, SLNodeDataType x)</span><br>&#123;<br>    SLNode* cur = pHead;<br>    <span class="hljs-keyword">while</span> (cur-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (cur-&gt;data == x)<br>            <span class="hljs-keyword">return</span> cur;<br>        <span class="hljs-keyword">else</span><br>            cur = cur-&gt;next;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 指定位置前插</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SListInsert</span><span class="hljs-params">(SLNode** ppHead, SLNode* pos, SLNodeDataType x)</span><br>&#123;<br>    SLNode* new_node = CreateNewNode(x);<br>    <span class="hljs-keyword">if</span> (*ppHead = pos) &#123;<br>        new_node-&gt;next = *ppHead;<br>        *ppHead = new_node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        SLNode* prev = *ppHead;<br>        <span class="hljs-keyword">while</span> (prev-&gt;next != pos) &#123;<br>            prev = prev-&gt;next;<br>        &#125;<br>        prev-&gt;next = new_node;<br>        new_node-&gt;next = pos;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//指定位置后插</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SListInsertAfter</span><span class="hljs-params">(SLNode* pos, SLNodeDataType x)</span><br>&#123;<br>    assert(pos);<br>    SLNode* new_node = CreateNewNode(x);<br>    new_node-&gt;next = pos-&gt;next;<br>    pos-&gt;next =new_node;<br>&#125;<br><span class="hljs-comment">//删除指定位置结点</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SListEarse</span><span class="hljs-params">(SLNode** ppHead, SLNode* pos)</span><br>&#123;<br>    assert(*ppHead != <span class="hljs-literal">NULL</span>);<br>    assert(pos);<br>    <span class="hljs-keyword">if</span> (*ppHead == pos)<br>        SListPopFront(*ppHead);<br>    <span class="hljs-keyword">else</span> &#123;<br>        SLNode* prev = *ppHead;<br>        <span class="hljs-keyword">while</span> (prev-&gt;next != pos) &#123;<br>            prev = prev-&gt;next;<br>        &#125;<br>        prev-&gt;next = pos-&gt;next;<br>        <span class="hljs-built_in">free</span>(pos);<br>        pos = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 删除指定位置之后的结点</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SListEraseAfter</span> <span class="hljs-params">(SLNode* pos)</span><br>&#123;<br>    assert(pos);<br>    assert(pos-&gt;next);<br>    SLNode* pos_next = pos-&gt;next;<br>    pos-&gt;next = pos_next-&gt;next;<br>    <span class="hljs-built_in">free</span>(pos_next);<br>    pos_next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-comment">//销毁链表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SListDestroy</span><span class="hljs-params">(SLNode** ppHead)</span><br>&#123;<br>    assert(ppHead);<br>    SLNode* cur = *ppHead;<br>    <span class="hljs-keyword">while</span> (cur-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        SLNode* cur_next = cur-&gt;next;<br>        <span class="hljs-built_in">free</span>(cur);<br>        cur = cur_next;<br>    &#125;<br>    *ppHead = <span class="hljs-literal">NULL</span>;     <span class="hljs-comment">//不要忘记</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构学习--链表</title>
    <link href="/2023/01/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/01/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>头节点：第一个有效节点</li><li>尾节点：最后一个有效节点</li><li>头结点：第一个有效节点之前的那个节点；头结点并不存放有效数据；加头节点的目的主要是为了方便对链表的操作。</li><li>头指针：指向头结点的指针变量</li><li>尾指针：指向尾节点的指针变量  <h4 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h4></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode记录</title>
    <link href="/2023/01/01/LeetCode%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/01/01/LeetCode%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h4 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span>* <span class="hljs-title function_">twoSum</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span>* returnSize)</span><br>&#123;<br>    <span class="hljs-type">int</span> *ret=(<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numsSize;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;numsSize;j++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i]+nums[j]==target)&#123;<br>                ret[<span class="hljs-number">0</span>]=i;<br>                ret[<span class="hljs-number">1</span>]=j;<br>                *returnSize=<span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">return</span> ret;<br>            &#125;<br>        &#125;<br>    &#125;<br>    *returnSize=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>比较简单，主要是要记得带上returnSize.<br>461.汉明距离</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">hammingDistance</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-type">int</span> a=x^y,ret=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(a)<br>    &#123;<br>        ret+=a&amp;<span class="hljs-number">1</span>;<br>        a&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是复习简单的位运算相关知识</p><h4 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20.有效的括号"></a>20.有效的括号</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> <span class="hljs-title function_">BoolRight</span><span class="hljs-params">(<span class="hljs-type">char</span> a)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(a==<span class="hljs-string">&#x27;)&#x27;</span>)   <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;(&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(a==<span class="hljs-string">&#x27;]&#x27;</span>)   <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;[&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(a==<span class="hljs-string">&#x27;&#125;&#x27;</span>)   <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(<span class="hljs-type">char</span> * s)</span><br>&#123;<br>    <span class="hljs-type">int</span> n=<span class="hljs-built_in">strlen</span>(s);<br>    <span class="hljs-type">int</span> top=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> skp[n+<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-type">char</span> ch=BoolRight(s[i]);<br>        <span class="hljs-keyword">if</span>(ch)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(top==<span class="hljs-number">0</span>||skp[top<span class="hljs-number">-1</span>]!=ch)    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            top--;<br>        &#125;<br>        <span class="hljs-keyword">else</span>    skp[top++]=s[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> top==<span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>观察了一下发现Ture的都是对称的，但是不知道怎么判断，看题解，wa 是栈诶，后进先出，遇到右边的就检验他前一个的</p><h4 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70.爬楼梯"></a>70.爬楼梯</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><br>&#123;   <br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>,b=<span class="hljs-number">0</span>,c=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        a=b;<br>        b=c;<br>        c=a+b;<br>    &#125;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br></code></pre></td></tr></table></figure><p>斐波拉契数列  </p><h4 id="9-回文"><a href="#9-回文" class="headerlink" title="9.回文"></a>9.回文</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">bool</span> <span class="hljs-title function_">isPalindrome</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>)   <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-type">int</span> num=x,cur=<span class="hljs-number">0</span>;<span class="hljs-comment">//用int会溢出</span><br>    <span class="hljs-keyword">while</span>(num&gt;<span class="hljs-number">0</span>)<br>    &#123;<br>        cur=cur*<span class="hljs-number">10</span>+num%<span class="hljs-number">10</span>;<br>        num/=<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    while(x&gt;cur)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        cur=cur*10+x%10;</span><br><span class="hljs-comment">        x/=10;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    return x==cur||cur==x/10;</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">return</span> x==cur;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="13-罗马数字转整数"><a href="#13-罗马数字转整数" class="headerlink" title="13.罗马数字转整数"></a>13.罗马数字转整数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">romanToInt</span><span class="hljs-params">(<span class="hljs-type">char</span> * s)</span><br>&#123;<br>    <span class="hljs-type">int</span> SymbolValues[<span class="hljs-number">26</span>];<br>    SymbolValues[<span class="hljs-string">&#x27;I&#x27;</span>-<span class="hljs-string">&#x27;A&#x27;</span>]=<span class="hljs-number">1</span>;<br>    SymbolValues[<span class="hljs-string">&#x27;V&#x27;</span>-<span class="hljs-string">&#x27;A&#x27;</span>]=<span class="hljs-number">5</span>;<br>    SymbolValues[<span class="hljs-string">&#x27;X&#x27;</span>-<span class="hljs-string">&#x27;A&#x27;</span>]=<span class="hljs-number">10</span>;<br>    SymbolValues[<span class="hljs-string">&#x27;L&#x27;</span>-<span class="hljs-string">&#x27;A&#x27;</span>]=<span class="hljs-number">50</span>;<br>    SymbolValues[<span class="hljs-string">&#x27;C&#x27;</span>-<span class="hljs-string">&#x27;A&#x27;</span>]=<span class="hljs-number">100</span>;<br>    SymbolValues[<span class="hljs-string">&#x27;D&#x27;</span>-<span class="hljs-string">&#x27;A&#x27;</span>]=<span class="hljs-number">500</span>;<br>    SymbolValues[<span class="hljs-string">&#x27;M&#x27;</span>-<span class="hljs-string">&#x27;A&#x27;</span>]=<span class="hljs-number">1000</span>;<br>    <span class="hljs-type">int</span> n=<span class="hljs-built_in">strlen</span>(s);<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> value=SymbolValues[s[i]-<span class="hljs-string">&#x27;A&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(i&lt;n<span class="hljs-number">-1</span>&amp;&amp;value&lt;SymbolValues[s[i+<span class="hljs-number">1</span>]-<span class="hljs-string">&#x27;A&#x27;</span>])<br>            ans-=value;<br>        <span class="hljs-keyword">else</span><br>            ans+=value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="14-最长公共前缀"><a href="#14-最长公共前缀" class="headerlink" title="14.最长公共前缀"></a>14.最长公共前缀</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> * <span class="hljs-title function_">longestCommonPrefix</span><span class="hljs-params">(<span class="hljs-type">char</span> ** strs, <span class="hljs-type">int</span> strsSize)</span>&#123;<br>    <br>    <span class="hljs-keyword">if</span>(strsSize==<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-built_in">strlen</span>(strs[<span class="hljs-number">0</span>]);j++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;strsSize;k++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(strs[<span class="hljs-number">0</span>][j]!=strs[k][j])<br>            &#123;<br>                strs[<span class="hljs-number">0</span>][j]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> strs[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>关于字符串数组的处理，学到了！  </p><h4 id="26-删除有序数组中的重复"><a href="#26-删除有序数组中的重复" class="headerlink" title="26.删除有序数组中的重复"></a>26.删除有序数组中的重复</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize)</span>&#123;<br>   <span class="hljs-type">int</span> fast=<span class="hljs-number">1</span>,slow=<span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">while</span>(fast&lt;numsSize)<br>   &#123;<br>       <span class="hljs-keyword">if</span>(nums[fast]!=nums[fast<span class="hljs-number">-1</span>])<br>       &#123;<br>           nums[slow]=nums[fast];<br>           slow++;<br>       &#125;<br>       fast++;<br>   &#125;<br>   <span class="hljs-keyword">return</span> slow;<br>&#125;<br></code></pre></td></tr></table></figure><p>双指针法<strong>有序</strong>，这个条件很关键  </p><h4 id="27-移除数据"><a href="#27-移除数据" class="headerlink" title="27.移除数据"></a>27.移除数据</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> val)</span>&#123;<br>    <span class="hljs-type">int</span> fast=<span class="hljs-number">0</span>,slow=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(fast&lt;numsSize)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(nums[fast]!=val)<br>        &#123;<br>            nums[slow]=nums[fast];<br>            slow++;<br>        &#125;<br>        fast++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> slow;<br>&#125;<br></code></pre></td></tr></table></figure><p>和上面那个题一样，更简单一点 </p><h4 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35.搜索插入位置"></a>35.搜索插入位置</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">searchInsert</span><span class="hljs-params">(<span class="hljs-type">int</span> *nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (nums[numsSize - <span class="hljs-number">1</span>] &lt; target)<br>        <span class="hljs-keyword">return</span> numsSize;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; numsSize; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (nums[i] == target)<br>            <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; numsSize; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(nums[i]&gt;target)<br>            <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><p>开始给我想复杂了，，，  </p><h4 id="58-最后一个单词的长度"><a href="#58-最后一个单词的长度" class="headerlink" title="58.最后一个单词的长度"></a>58.最后一个单词的长度</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">lengthOfLastWord</span><span class="hljs-params">(<span class="hljs-type">char</span> * s)</span>&#123;<br>    <span class="hljs-type">int</span> len=<span class="hljs-built_in">strlen</span>(s)<span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> length=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(len==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(s[len]==<span class="hljs-string">&#x27; &#x27;</span>)<br>        len--;<br>    <span class="hljs-keyword">while</span>(len&gt;=<span class="hljs-number">0</span>&amp;&amp;s[len]!=<span class="hljs-string">&#x27; &#x27;</span>)<br>    &#123;<br>        length++;<br>        len--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="66-加一"><a href="#66-加一" class="headerlink" title="66.加一"></a>66.加一</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span>* <span class="hljs-title function_">plusOne</span><span class="hljs-params">(<span class="hljs-type">int</span>* digits, <span class="hljs-type">int</span> digitsSize, <span class="hljs-type">int</span>* returnSize)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=digitsSize<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        digits[i]=digits[i]+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(digits[i]!=<span class="hljs-number">10</span>)<br>        &#123;<br>            *returnSize=digitsSize;<br>            <span class="hljs-keyword">return</span> digits;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(digits[i]==<span class="hljs-number">10</span>)<br>            digits[i]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span>* ans=(<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*(digitsSize+<span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">memset</span>(ans,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*(digitsSize+<span class="hljs-number">1</span>));<br>    ans[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    *returnSize=digitsSize+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="69-x的平方根"><a href="#69-x的平方根" class="headerlink" title="69.x的平方根"></a>69.x的平方根</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">mySqrt</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">long</span> i=<span class="hljs-number">0</span>;i*i&lt;=x;i++)<br>        a=i;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)a;<br>&#125;<br></code></pre></td></tr></table></figure><p>ee最粗暴的做法，竟然没超时  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">mySqrt</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-comment">//二分法</span><br>    <span class="hljs-type">int</span> left=<span class="hljs-number">1</span>,right=x/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(left&lt;=right)&#123;<br>        <span class="hljs-type">int</span> mid=left+(right-left)/<span class="hljs-number">2</span>;<span class="hljs-comment">//相对于(left+right)/2可以防止溢出</span><br>        <span class="hljs-keyword">if</span>((<span class="hljs-type">long</span>)mid*mid&gt;x)<br>            right=mid<span class="hljs-number">-1</span>;<span class="hljs-comment">//左半边</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((<span class="hljs-type">long</span>)mid*mid&lt;x)    <br>            left=mid+<span class="hljs-number">1</span>;<span class="hljs-comment">//右半边</span><br>        <span class="hljs-keyword">else</span>        <br>            <span class="hljs-keyword">return</span> mid;<br>    &#125;<br>    <span class="hljs-keyword">return</span> left<span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>二分法，好耶  </p><h4 id="83-删除排序链表中的重复数字"><a href="#83-删除排序链表中的重复数字" class="headerlink" title="83.删除排序链表中的重复数字"></a>83.删除排序链表中的重复数字</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">deleteDuplicates</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* head)</span>&#123;<br>    <span class="hljs-keyword">if</span>(!head)<br>        <span class="hljs-keyword">return</span> head;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span>* <span class="hljs-title">curl</span>=</span>head;<br>    <span class="hljs-keyword">while</span>(curl-&gt;next!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">if</span>(curl-&gt;val==curl-&gt;next-&gt;val)<br>            curl-&gt;next=curl-&gt;next-&gt;next;<br>        <span class="hljs-keyword">else</span><br>            curl=curl-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3.无重复字符的最长子串"></a>3.无重复字符的最长子串</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">lengthOfLongestSubstring</span><span class="hljs-params">(<span class="hljs-type">char</span> * s)</span><br>&#123;<br>    <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=<span class="hljs-number">0</span>,max=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> HaveSameNumber=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> len=<span class="hljs-built_in">strlen</span>(s);<br>    <span class="hljs-type">int</span> i,j;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(left&lt;=right)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(j=left;j&lt;right;j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(s[j]==s[right])<br>                    HaveSameNumber=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(HaveSameNumber)<br>                    left=j+<span class="hljs-number">1</span>;<br>                HaveSameNumber=<span class="hljs-number">0</span>;<br>            &#125;<br>            max=max&lt;(right-left+<span class="hljs-number">1</span>)?(right-left+<span class="hljs-number">1</span>):max;<br>            ++right;<br>        &#125;  <br>    &#125;<br>    <span class="hljs-keyword">return</span> max;<br>&#125;<br></code></pre></td></tr></table></figure><p>滑动窗口？好像用哈希表做更好，但我还不会唔苦鲁西</p><h4 id="88-合并两个有序数组"><a href="#88-合并两个有序数组" class="headerlink" title="88.合并两个有序数组"></a>88.合并两个有序数组</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums1, <span class="hljs-type">int</span> nums1Size, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span>* nums2, <span class="hljs-type">int</span> nums2Size, <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span>* temp=(<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*(m+n));<br>    <span class="hljs-type">int</span> cur1=<span class="hljs-number">0</span>,cur2=<span class="hljs-number">0</span>,dest=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(cur1&lt;m&amp;&amp;cur2&lt;n)&#123;<br>        <span class="hljs-keyword">if</span>(nums1[cur1]&lt;=nums2[cur2])<br>            temp[dest++]=nums1[cur1++];<br>        <span class="hljs-keyword">else</span> <br>            temp[dest++]=nums2[cur2++];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(cur1&lt;m)<br>        temp[dest++]=nums1[cur1++];<br>    <span class="hljs-keyword">while</span>(cur2&lt;n)<br>        temp[dest++]=nums2[cur2++];<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;m+n;i++)<br>        nums1[i]=temp[i];<br>    <span class="hljs-built_in">free</span>(temp);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="118-杨辉三角"><a href="#118-杨辉三角" class="headerlink" title="118.杨辉三角"></a>118.杨辉三角</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span>** <span class="hljs-title function_">generate</span><span class="hljs-params">(<span class="hljs-type">int</span> numRows, <span class="hljs-type">int</span>* returnSize, <span class="hljs-type">int</span>** returnColumnSizes)</span>&#123;<br>    <span class="hljs-type">int</span>** ret=<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>*)*numRows);<br>    *returnSize=numRows;<span class="hljs-comment">//行数</span><br>    *returnColumnSizes = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>*)*numRows); <span class="hljs-comment">//为每一列分配空间</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numRows;i++)&#123;<br>        ret[i]=<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*(i+<span class="hljs-number">1</span>));<br>        (*returnColumnSizes)[i] = i + <span class="hljs-number">1</span>;<br>        ret[i][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        ret[i][i]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;i;j++)&#123;<br>            ret[i][j]=ret[i<span class="hljs-number">-1</span>][j]+ret[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>        &#125;<br>    &#125; <br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>基本思路我是知道的，但关于分配空间我还不是怎么懂</p><h4 id="基础二分"><a href="#基础二分" class="headerlink" title="基础二分"></a>基础二分</h4><h5 id="二分法边界问题"><a href="#二分法边界问题" class="headerlink" title="二分法边界问题"></a><a href="https://leetcode.cn/problems/binary-search/solution/er-fen-cha-zhao-xiang-jie-by-labuladong/">二分法边界问题</a></h5><h5 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704.二分查找"></a>704.二分查找</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-type">int</span> low=<span class="hljs-number">0</span>,high=numsSize<span class="hljs-number">-1</span>,mid;<br>    <span class="hljs-keyword">while</span>(low&lt;=high)&#123;<br>        mid=(high-low)/<span class="hljs-number">2</span>+low;<br>        <span class="hljs-keyword">if</span>(target==nums[mid])<br>            <span class="hljs-keyword">return</span> mid;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target&gt;nums[mid])<br>            low=mid+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <br>            high=mid<span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="278-第一个错误的版本"><a href="#278-第一个错误的版本" class="headerlink" title="278.第一个错误的版本"></a>278.第一个错误的版本</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">firstBadVersion</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> left=<span class="hljs-number">1</span>,right=n,mid;<br>    <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>        mid=(right-left)/<span class="hljs-number">2</span>+left;<br>        <span class="hljs-keyword">if</span>(isBadVersion(mid))<br>            right=mid;<br>        <span class="hljs-keyword">else</span> left=mid+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> left;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="35-搜索插入位置-1"><a href="#35-搜索插入位置-1" class="headerlink" title="35.搜索插入位置"></a>35.搜索插入位置</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">searchInsert</span><span class="hljs-params">(<span class="hljs-type">int</span> *nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target)</span><br>&#123;<br>    <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=numsSize<span class="hljs-number">-1</span>,mid,ans=numsSize;<br>    <span class="hljs-keyword">while</span>(left&lt;=right)&#123;<br>        mid=(right-left)/<span class="hljs-number">2</span>+left;<br>        <span class="hljs-keyword">if</span>(target&lt;=nums[mid])&#123;<br>            ans=mid;<br>            right=mid<span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <br>            left=mid+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="基础双指针"><a href="#基础双指针" class="headerlink" title="基础双指针"></a>基础双指针</h4><h5 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977.有序数组的平方"></a>977.有序数组的平方</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span>* <span class="hljs-title function_">sortedSquares</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span>* returnSize)</span>&#123;<br>    <span class="hljs-type">int</span>* ans=<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*numsSize);<br>    *returnSize=numsSize;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=numsSize<span class="hljs-number">-1</span>,pos=numsSize<span class="hljs-number">-1</span>;<br>    <span class="hljs-comment">//逆序放入，学到了捏！</span><br>    <span class="hljs-keyword">for</span>(;i&lt;=j;--pos)&#123;<br>        <span class="hljs-keyword">if</span>(nums[i]*nums[i]&lt;=nums[j]*nums[j])&#123;<br>            ans[pos]=nums[j]*nums[j];<br>            --j;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            ans[pos]=nums[i]*nums[i];<br>            ++i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="189-轮转数组"><a href="#189-轮转数组" class="headerlink" title="189.轮转数组"></a>189.轮转数组</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> *a,<span class="hljs-type">int</span> *b)</span>&#123;<br>    <span class="hljs-type">int</span> t=*a;<br>    *a=*b;<br>    *b=t;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">reserse</span><span class="hljs-params">(<span class="hljs-type">int</span> *nums,<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right)</span>&#123;<br>    <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>        swap(&amp;nums[left],&amp;nums[right]);<br>        --right;<br>        ++left;<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">rotate</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> k)</span>&#123;<br>    k%=numsSize;<br>    reserse(nums,<span class="hljs-number">0</span>,numsSize<span class="hljs-number">-1</span>);<br>    reserse(nums,<span class="hljs-number">0</span>,k<span class="hljs-number">-1</span>);<br>    reserse(nums,k,numsSize<span class="hljs-number">-1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>很厉害的思路</p><h5 id="283-移动0"><a href="#283-移动0" class="headerlink" title="283.移动0"></a>283.移动0</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">moveZeroes</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize)</span>&#123;<br><span class="hljs-comment">//双指针法</span><br>    <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(right=<span class="hljs-number">0</span>;right&lt;numsSize;right++)&#123;<br>        <span class="hljs-keyword">if</span>(nums[right]!=<span class="hljs-number">0</span>)<br>            nums[left++]=nums[right];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(;left&lt;numsSize;left++)&#123;<br>        nums[left]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="167-两数之和Ⅱ"><a href="#167-两数之和Ⅱ" class="headerlink" title="167.两数之和Ⅱ"></a>167.两数之和Ⅱ</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span>* <span class="hljs-title function_">twoSum</span><span class="hljs-params">(<span class="hljs-type">int</span>* numbers, <span class="hljs-type">int</span> numbersSize, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span>* returnSize)</span>&#123;<br>    <span class="hljs-type">int</span> *ret = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*<span class="hljs-number">2</span>);<br>    <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=numbersSize<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>        <span class="hljs-type">int</span> sum=numbers[left]+numbers[right];<br>        <span class="hljs-keyword">if</span>(sum==target)&#123;<br>            ret[<span class="hljs-number">0</span>]=left+<span class="hljs-number">1</span>;<br>            ret[<span class="hljs-number">1</span>]=right+<span class="hljs-number">1</span>;<br>            *returnSize=<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">return</span> ret;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum&lt;target)<br>            ++left;<br>        <span class="hljs-keyword">else</span><br>            --right;<br>    &#125;<br>    *returnSize = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344.反转字符串"></a>344.反转字符串</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">reverseString</span><span class="hljs-params">(<span class="hljs-type">char</span>* s, <span class="hljs-type">int</span> sSize)</span>&#123;<br>    <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=sSize<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>        <span class="hljs-type">int</span> temp=s[left];<br>        s[left]=s[right];<br>        s[right]=temp;<br>        left++;<br>        right--;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="557-反转字符串中的单词Ⅲ"><a href="#557-反转字符串中的单词Ⅲ" class="headerlink" title="557.反转字符串中的单词Ⅲ"></a>557.反转字符串中的单词Ⅲ</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> * <span class="hljs-title function_">reverseWords</span><span class="hljs-params">(<span class="hljs-type">char</span> * s)</span>&#123;<br>    <span class="hljs-type">int</span> lenth=<span class="hljs-built_in">strlen</span>(s);<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,left,right;<br>    <span class="hljs-keyword">while</span>(i&lt;lenth)&#123;<br>        left=i;<br>        <span class="hljs-keyword">while</span>(i&lt;lenth&amp;&amp;s[i]!=<span class="hljs-string">&#x27; &#x27;</span>)<span class="hljs-comment">//注意在这里判断是否越界</span><br>            ++i;<br>        right=i<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>            <span class="hljs-type">char</span> temp=s[left];<br>            s[left]=s[right];<br>            s[right]=temp;<br>            left++,right--;<br>        &#125;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="基础哈希表"><a href="#基础哈希表" class="headerlink" title="基础哈希表"></a>基础哈希表</h4><h5 id="217-存在重复元素"><a href="#217-存在重复元素" class="headerlink" title="217.存在重复元素"></a>217.存在重复元素</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hashTable</span> &#123;</span><br>    <span class="hljs-type">int</span> key;<br>    UT_hash_handle hh;<br>&#125;;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">containsDuplicate</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize)</span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hashTable</span> *<span class="hljs-title">set</span>=</span><span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numsSize;i++)&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hashTable</span> *<span class="hljs-title">temp</span>;</span><br>        HASH_FIND_INT(<span class="hljs-built_in">set</span>,nums+i,temp);<br>        <span class="hljs-keyword">if</span>(temp==<span class="hljs-literal">NULL</span>)&#123;<br>            temp=<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> hashTable));<br>            temp-&gt;key=nums[i];<br>            HASH_ADD_INT(<span class="hljs-built_in">set</span>,key,temp);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为这个题去简单的学了一下哈希表，好耶</p>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/12/27/hello-world/"/>
    <url>/2022/12/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>尝试</title>
    <link href="/2022/12/27/TEST/"/>
    <url>/2022/12/27/TEST/</url>
    
    <content type="html"><![CDATA[<p>芜湖，开始写博客啦，主要是希望能监督自己去学习新东西，感觉写博客是很好的学习方式捏。<br>先记录下这次搭博客吧  </p><h5 id="还算顺利的搭博客初尝试"><a href="#还算顺利的搭博客初尝试" class="headerlink" title="还算顺利的搭博客初尝试"></a>还算顺利的搭博客初尝试</h5><p>选了比较主流的github+hexo，感觉选对教程很重要，花了大概一个小时去看各类教程，对流程和原理大概有一些认识了，就开始搭了，推荐这个<a href="https://oceanwang.top/personal-website-1/">教程</a> ,跟着走基本是没有问题的。<br>也遇到过几个error，但只要会用搜索引擎就可以解决，可惜这次没有记录下来，感觉都是小白（比如我）容易遇到的问题orz，下次一定！</p>]]></content>
    
    
    
    <tags>
      
      <tag>日常纪事</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言hb记录</title>
    <link href="/2022/12/26/C%E8%AF%AD%E8%A8%80hb%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/12/26/C%E8%AF%AD%E8%A8%80hb%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>感觉指针后面的东西还是没有学扎实，所以找了几个视频学习，这篇用来记录一下</p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p><strong>指针就是地址,地址就是指针</strong>，地址就是内存单元的编号，是从0开始的非负整数。指针变量是存放地址的变量，两者不同，但我们叙述的时候会把指针变量简称为指针<br>//偏个题，二进制的一位叫做1bit，字节（byte）英文字符通常是一个字节 1byte=8bit<br>基本知识</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test_1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>* p;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    p=&amp;i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#x\n&quot;</span>,p);</span><br><span class="line">    *p=<span class="number">5</span>;<span class="comment">/*当把i的地址赋给指针p时，*p所代表的就是i的值，就是说*p完全等同于i, p是i的地址，*是解引用p*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">    i=<span class="number">4</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#x\n&quot;</span>,p);<span class="comment">//p存放的是i的地址，所以改变i对p是没有丝毫影响的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test_2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>* q;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*q);<span class="comment">//emm为啥是4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>* p,<span class="type">int</span>* q)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    t=*p;</span><br><span class="line">    *p=*q;</span><br><span class="line">    *q=t;</span><br><span class="line">    <span class="comment">/*t=p;</span></span><br><span class="line"><span class="comment">    p=q;</span></span><br><span class="line"><span class="comment">    q=t;*/</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="comment">//虽然把a,b的地址传进去了，但是a,b的地址是不能改变的，所以没有用,我们需要的是改变a,b的内容</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test_1();</span><br><span class="line">    test_2();</span><br><span class="line">    <span class="type">int</span> a=<span class="number">3</span>,b=<span class="number">5</span>;</span><br><span class="line">    swap(&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d&quot;</span>,a,b);<span class="comment">//a=3,b=5,没有用</span></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h4><h5 id="指针和一维数组"><a href="#指针和一维数组" class="headerlink" title="指针和一维数组"></a>指针和一维数组</h5><p><strong>一维数组名</strong>是个指针常量，存放的是一维数组第一个元素的地址，一个指针变量，无论它指向的变量占几个字节，该指针变量本身只占四个字节<br>一个变量的地址使用该变量首字节的地址来表示</p><h5 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h5><p>传统数组：eg:int a[5];传统形式定义的数组，该数组的内存程序员无法手动释放，在一个函数运行期间，系统为该函数中数组所分配的空间会一直存在，直到该函数运行完毕时，数组的空间才会被系统释放。而且不能跨函数使用<br><strong>malloc()</strong> 函数：eg: int * p=(int * )malloc(sizeof(int)) </p><ul><li><code>malloc</code> 返回的是已分配空间的void指针，所以需要强制类型转换</li><li>接收的是要分配的字节数，返回的是开辟的内存第一个字节的首地址</li><li>p本身所占的内存是静态分配的，而p所指向的内存是动态分配的<h5 id="多级指针"><a href="#多级指针" class="headerlink" title="多级指针"></a>多级指针</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">f1</span><span class="params">(<span class="type">int</span>** q)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> i=<span class="number">5</span>;</span><br><span class="line">   <span class="comment">//*q=&amp;i;//这编译可以通过</span></span><br><span class="line">   **q=<span class="number">5</span>;<span class="comment">//这样就会出问题了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">f2</span><span class="params">(<span class="type">int</span>** q)</span></span><br><span class="line">&#123;</span><br><span class="line">    *q=(<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    **q=<span class="number">5</span>;<span class="comment">//这样没问题</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>* p;</span><br><span class="line">    <span class="comment">//f1(&amp;p);</span></span><br><span class="line">    f2(&amp;p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);</span><br><span class="line">    <span class="comment">/*虽然结果是5，但是逻辑上是有问题的，他用了f()函数的i</span></span><br><span class="line"><span class="comment">    用了f()函数的内存，而i的内存应该在f()结束后就被释放的，造成了内存的越界，不安全?*/</span></span><br><span class="line">    <span class="comment">//free(p);</span></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="静态内存分配和动态内存分配"><a href="#静态内存分配和动态内存分配" class="headerlink" title="静态内存分配和动态内存分配"></a>静态内存分配和动态内存分配</h5><p>可<a href="https://yuhao0102.github.io/2021/04/21/%E9%9D%99%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/">参考</a></p><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>About -&gt;: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>;</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">str</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">ptr</span>=</span>&amp;str;</span><br><span class="line"><span class="comment">//则 ptr-&gt;age==(*ptr).age==str.age</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>（好像没怎么用过&amp;&amp;看过）限定范围（？托下巴思考  </p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>关于数组  </p><ul><li>优点：存取速度快</li><li>缺点：需要一个连续的很大的内存空间；插入和删除的效率低  </li></ul><p>感觉可以直接去看数据结构学链表了</p>]]></content>
    
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
